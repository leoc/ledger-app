<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.bundle.min.js"></script>
<script type="text/javascript" src="/public/js/canvasjs.min.js"></script>
<script>
 $(document).ready(function() {
     $('#date-filter').on('change', function(e) {
	 window.location = ''+window.location.pathname+'?filter='+$(e.target).val();
     });
 });
</script>

<%
filter = params[:filter] || "month,#{Date.today.strftime('%Y-%m-01')}"
timespan, date_str = filter.split(',')
@selected_date = Date.parse(date_str)
@last_date =
if @selected_date.month == Date.today.month then
    Date.today
else
    Date.new(@selected_date.year, @selected_date.month, 1).next_month.prev_day
end

@trunc_to = timespan
if timespan == 'year'
    @date_column = 'xtn_year'
    @budget_clause = "date_trunc('year', xtn_month) = '#{@selected_date}'"
end
@date_column ||= 'xtn_month'
@register_param = @trunc_to
@date_clause = "#{@date_column} = '#{@selected_date}'"
@date_clause_lte = "#{@date_column} <= '#{@selected_date}'"
@budget_clause ||= @date_clause
%>

<% @months = query do %>
    select
    xtn_month
    from
    accounts_months
    group by
    xtn_month
    order by
    xtn_month desc
<% end %>

<% @years = query do %>
    select
    xtn_year
    from
    accounts_years
    group by
    xtn_year
    order by
    xtn_year desc
<% end %>

<% @cash = query do %>
    select
    sum(real_money) as real_money,
    sum(liquid_investments) as liquid_investments,    
    sum(funds) as funds,
    sum(liabilities) as liabilities,
    sum(real_money) + sum(liquid_investments) - sum(funds) + sum(liabilities) as amount
    from(
    select
    sum(case when account ~ '(<%= Constants::CURRENT_ACCOUNTS %>)' and account !~ 'Liabilities' then amount else 0 end) as real_money,
    sum(case when account ~ '^Assets:Funds:' then amount else 0 end) as funds,
    sum(case when account ~ '(Liabilities:Chase|Liabilities:Payable)' then amount else 0 end) as liabilities,
    sum(0) as liquid_investments
    from
    ledger
    where
    <%= @date_clause_lte %>
    union all
    select
    sum(0) as real_money,
    sum(0) as funds,
    sum(0) as liabilities,
    sum(amount) as liquid_investments
    from (
    select 
    commodity,
    sum(amount) * (select price from prices where prices.commodity = ledger.commodity and date_trunc('<%= @trunc_to %>', price_date) <= '<%= @selected_date %>' order by price_date desc limit 1) as amount
    from
    ledger
    where
    account = 'Assets:Investments:Taxable:Joint:Vanguard'
    and commodity ~ '(<%= Constants::LIQUID_TICKERS %>)'
    and <%= @date_clause_lte %>
    group by
    commodity
    ) x
    ) x
<% end %>

<% @income = query do %>
    with inc as (
    select
    *
    from (
    select
    account,
    -1 * sum(amount) as amount
    from
    ledger
    where
    account ~ '^Income'
    and <%= @date_clause %>
    group by
    account
    order by
    account
    ) x
    union all
    select
    'Taxes and Medical out' as account, -1 * sum(amount) as amount
    from
    ledger
    where
    account ~ '^Expenses:Taxes|Expenses:Insurance:Medical'
    and <%= @date_clause %>
    and xtn_id not in (select distinct xtn_id from ledger where account ~ 'Assets:Funds' and <%= @date_clause %>)
    union all
    select 'Retirement out' as account, -1 * sum(cost) as amount from ledger where account ~ 'Assets:Investments:(Traditional|SEP|Roth|401K)' and <%= @date_clause %>
    )
    select replace(account, 'Income:', '') as "Account", amount as "Amount" from inc where round(amount, 0) != 0
    union all
    select 'Total' as "Account", sum(amount) as "Amount" from inc
<% end %>

<% @bgt_query = capture do %>
    with budgeted as (
    select
    b.account as "Account",
    b.amount as "Budget",
    coalesce(x.amount, 0) as "Spent",
    b.amount - coalesce(x.amount, 0) as "Diff"
    from
    (select date_trunc('<%= @trunc_to %>', xtn_month) as <%= @date_column %>, account, sum(amount) as amount from budget_months where <%= @budget_clause %> and amount > 0 group by <%= @date_column %>, account) b
    left outer join (
    select
    <%= @date_column %>,
    account,
    sum(amount) as amount
    from
    ledger
    where
    account in (select distinct account from budget_periods)
    and <%= @date_clause %>
    and tags !~ 'Reimburseable'
    and tags !~ 'nobudget'
    and xtn_id not in (select distinct xtn_id from ledger where account ~ 'Assets:Funds' and <%= @date_clause %>)
    group by
    <%= @date_column %>,
    account
    ) x using (account)
    order by
    b.account
    )
    select
    *
    from
    budgeted
    union all
    select
    'Total' as "Account",
    sum("Budget") as "Budget",
    sum("Spent") as "Spent",
    sum("Diff") as "Diff"
    from
    budgeted  
<% end %>

<% @budgeted_expenses = query do %>
    with budgeted as (
    select
    b.account as "Account",
    b.amount as "Budget",
    coalesce(x.amount, 0) as "Spent",
    b.amount - coalesce(x.amount, 0) as "Diff"
    from
    (select date_trunc('<%= @trunc_to %>', xtn_month) as <%= @date_column %>, account, sum(amount) as amount from budget_months where <%= @budget_clause %> and amount > 0 group by <%= @date_column %>, account) b
    left outer join (
    select
    <%= @date_column %>,
    budget_periods.account,
    sum(ledger.amount) as amount
    from ledger
    cross join budget_periods
    where
    ledger.account ~ budget_periods.account
    and <%= @date_clause %>
    group by
    <%= @date_column %>,
    budget_periods.account
    ) x using (account)
    order by
    b.account
    )
    select
    *
    from
    budgeted
    union all
    select
    'Total' as "Account",
    sum("Budget") as "Budget",
    sum("Spent") as "Spent",
    sum("Diff") as "Diff"
    from
    budgeted    
<% end %>

<% @kpis = query do %>
    with
    limits as (select ('<%= @last_date.strftime('%Y-%m-%d') %>'::date - (x || ' months')::interval)::date as xtn_date from generate_series(0,1) x)
    select
    xtn_date,
    coalesce((select sum(-1 * amount) from ledger where account ~ 'Income' and date_trunc('month', limits.xtn_date) <= xtn_date and xtn_date <= limits.xtn_date), 0) as income,
    coalesce((select sum(amount) from ledger where account ~ 'Expense' and date_trunc('month', limits.xtn_date) <= xtn_date and xtn_date <= limits.xtn_date), 0) as expenses,
    coalesce((select sum(-1 * amount) from ledger where account ~ 'Income|Expense' and date_trunc('month', limits.xtn_date) <= xtn_date and xtn_date <= limits.xtn_date), 0) as net,
    coalesce((select sum(amount) from ledger where account ~ 'Assets:Funds' and xtn_date <= limits.xtn_date), 0) as funds,
    coalesce((select sum(amount) from ledger where account ~ 'Assets:(Cash|Fidor|DKB|PayPal)' and xtn_date <= limits.xtn_date), 0) as assets
    from limits;
<% end %>


<% @unbudgeted_expenses = query do %>
    with ubexp as (
    select
    account as "Account",
    sum(amount) as "Amount"
    from
    expenses
    where (
    (account not in (select account from budget_months where <%= @date_clause %>))
    or
    (account in (select account from budget_months where <%= @date_clause %>) and tags ~ 'nobudget: true')
    )
    and tags !~ 'skipunbudget: true'
    and <%= @date_clause %>
    and xtn_id not in (select distinct xtn_id from ledger where account ~ 'Assets:Funds' and <%= @date_clause %>)
    group by
    account
    order by
    account
    )
    select
    *
    from
    ubexp
    union all
    select
    'Total' as "Account",
    sum("Amount") as "Amount"
    from
    ubexp
<% end %>

<% @funds = query do %>
    with funds as (
    select
    replace(account, 'Assets:Funds:', '') as "Fund",
    sum(case when <%= @date_column %> < '<%= @selected_date %>' then amount else 0 end) as "Start",  
    sum(case when amount > 0 and <%= @date_clause %> then amount else 0 end) as "In",
    sum(case when amount < 0 and <%= @date_clause %> then amount else 0 end) as "Out", 
    sum(case when <%= @date_clause %> then amount else 0 end) as "Net",
    sum(amount) as "Balance"
    from
    ledger
    where
    account ~ '^Assets:Funds'
    and account !~ '<%= Constants::LONG_TERM_FUNDS %>'
    and <%= @date_column %> <= '<%= @selected_date %>'
    group by
    account
    having
    round(sum(case when <%= @date_clause %> then amount else 0 end)) != 0 or round(sum(amount)) != 0
    order by
    account
    )
    select * from funds
    union all
    select 'Total' as "Fund", sum("Start") as "Start", sum("In") as "In", sum("Out") as "Out", sum("Net") as "Net", sum("Balance") as "Balance" from funds
<% end %>

<% @long_term_funds = query do %>
    with funds as (
    select
    replace(account, 'Assets:Funds:', '') as "Fund",
    sum(case when <%= @date_column %> < '<%= @selected_date %>' then amount else 0 end) as "Start",  
    sum(case when amount > 0 and <%= @date_clause %> then amount else 0 end) as "In",
    sum(case when amount < 0 and <%= @date_clause %> then amount else 0 end) as "Out", 
    sum(case when <%= @date_clause %> then amount else 0 end) as "Net",
    sum(amount) as "Balance"
    from
    ledger
    where
    account ~ '^Assets:Funds'
    and account ~ '<%= Constants::LONG_TERM_FUNDS %>'
    and <%= @date_column %> <= '<%= @selected_date %>'
    group by
    account
    having
    round(sum(case when <%= @date_clause %> then amount else 0 end)) != 0 or round(sum(amount)) != 0
    order by
    account
    )
    select * from funds
    union all
    select 'Total' as "Fund", sum("Start") as "Start", sum("In") as "In", sum("Out") as "Out", sum("Net") as "Net", sum("Balance") as "Balance" from funds  
<% end %>

<% @current_accounts = query do %>
    with funds as (
    select
    account as "Account",
    sum(case when <%= @date_column %> < '<%= @selected_date %>' then amount else 0 end) as "Start",
    sum(case when amount > 0 and <%= @date_clause %> then amount else 0 end) as "In",
    sum(case when amount < 0 and <%= @date_clause %> then amount else 0 end) as "Out", 
    sum(case when <%= @date_clause %> then amount else 0 end) as "Net",
    sum(amount) as "Balance"
    from
    ledger
    where
    account ~ '<%= Constants::CURRENT_ACCOUNTS %>'
    and <%= @date_column %> <= '<%= @selected_date %>'
    group by
    account
    having
    round(sum(case when <%= @date_clause %> then amount else 0 end)) != 0 or round(sum(amount)) != 0
    order by
    account
    )
    select * from funds
    union all
    select 'Total' as "Account", sum("Start") as "Start", sum("In") as "In", sum("Out") as "Out", sum("Net") as "Net", sum("Balance") as "Balance" from funds  
<% end %>

<% @long_term_liabilities = query do %>
    with funds as (
    select
    account as "Account",
    sum(case when <%= @date_column %> < '<%= @selected_date %>' then amount else 0 end) as "Start",
    sum(case when amount > 0 and <%= @date_clause %> then amount else 0 end) as "In",
    sum(case when amount < 0 and <%= @date_clause %> then amount else 0 end) as "Out", 
    sum(case when <%= @date_clause %> then amount else 0 end) as "Net",
    sum(amount) as "Balance"  
    from
    ledger
    where
    account ~ '<%= Constants::LONG_TERM_LIABILITIES %>'
    and <%= @date_column %> <= '<%= @selected_date %>'                                              
    group by
    account
    having
    round(sum(case when <%= @date_clause %> then amount else 0 end)) != 0 or round(sum(amount)) != 0                                 
    order by
    account
    )
    select * from funds
    union all
    select 'Total' as "Account", sum("Start") as "Start", sum("In") as "In", sum("Out") as "Out", sum("Net") as "Net", sum("Balance") as "Balance" from funds  
<% end %>

<%
@stash_start = params[:stash_start] || [@selected_date, Date.parse('2015-01-01')].min
@asset_regex = params[:include_mortgage] ? 'Assets:(.*:(Checking|Savings)|Emigrant|ING|UWCU|Amex|House:Zestimate)' : 'Assets:(.*:(Checking|Savings)|Emigrant|ING|UWCU|Amex)'
@liabilities_regex = params[:include_mortgage] ? 'Funds' : '(Funds|Mortgage)'
%>


<% @stash = query do %>
    with months as (
    select
    xtn_month
    from
    calendar
    where
    xtn_month >= '<%= @stash_start %>'
    and <%= @date_column %> <= '<%= @selected_date %>'
    group by
    xtn_month
    order by
    xtn_month
    ),
    cash_assets as (
    select
    xtn_date,
    xtn_month,
    amount
    from
    ledger
    where
    account !~ 'Funds'
    and account ~ '<%= @asset_regex %>'
    order by
    xtn_date,
    amount
    ),
    ending_prices as (
    select 
    xtn_month::date as xtn_month,
    commodity, 
    price
    from (
    select 
    date_trunc('month', price_date) as xtn_month,
    commodity,
    price,
    row_number() over (partition by date_trunc('month', price_date), commodity order by price_date desc) as rk
    from
    prices
    ) x
    where rk = 1
    ),
    stocks as (
    select
    xtn_month,
    commodity,
    sum(amount) as amount
    from
    ledger
    where
    account ~ 'Assets:Investments'
    or account = 'Assets:401K:Contribution'
    group by
    xtn_month,
    commodity
    order by
    xtn_month,
    commodity
    ),
    stock_assets as (
    select
    xtn_month,
    sum(case when commodity = '$' then amount else amount * (select price from ending_prices p where p.xtn_month <= x.xtn_month and p.commodity = x.commodity order by p.xtn_month desc limit 1) end)  as amount
    from (
    select
    xtn_month,
    commodity,
    (select sum(amount) from stocks s where s.commodity = l.commodity and xtn_month <= m.xtn_month) as amount
    from
    months m,
    (select distinct commodity from stocks) l
    order by
    xtn_month,
    commodity
    ) x
    group by
    xtn_month
    ),
    liabilities as (
    select
    xtn_date,
    xtn_month,
    amount
    from
    ledger
    where
    account ~ 'Liabilities'
    and account !~ '<%= @liabilities_regex %>'
    )
    select
    xtn_month as "Month",
    cash as "Cash",
    stock as "Investments",
    liabilities as "Liabilities",
    cash + stock + liabilities as "Stash"
    from (
    select
    xtn_month,
    (select sum(coalesce(amount, 0)) from cash_assets where xtn_date < months.xtn_month + '1 month'::interval) as cash,
    (select coalesce(amount, 0) from stock_assets s where s.xtn_month = months.xtn_month) as stock,
    (select sum(coalesce(amount, 0)) from liabilities where xtn_date < months.xtn_month + '1 month'::interval) as liabilities
    from
    months
    ) x
    order by xtn_month desc
<% end %>

<% @allocations = query do %>
    with amounts as (
    select
    commodity,
    sum(amount) * (select price from prices where prices.commodity = ledger.commodity and date_trunc('<%= @trunc_to %>', price_date) <= '<%= @selected_date %>' order by price_date desc limit 1) as amount
    from
    ledger
    where
    account ~ 'Assets:Investments'
    and <%= @date_column %> <= '<%= @selected_date %>'
    group by
    commodity
    having
    sum(amount) > 0.01
    ),
    allocations as (
    select
    commodity,
    amount * us_stock as us_stock,
    amount * us_bond as us_bond,
    amount * international_stock as international_stock,
    amount * international_bond as international_bond,
    amount * reit as reit
    from
    asset_allocation
    inner join amounts using (commodity)
    where
    from_date <= '<%= @selected_date %>'
    and coalesce(to_date, '2222-01-01') >= '<%= @selected_date %>'
    )
    select
    commodity as "Fund",
    us_stock as "US Stock",
    international_stock as "Intl Stock",
    reit as "REIT",
    us_bond as "US Bond",
    international_bond as "Intl Bond"
    from
    allocations
    union all
    select
    'Total' as commodity,
    sum(us_stock),
    sum(international_stock),
    sum(reit),
    sum(us_bond),
    sum(international_bond)
    from
    allocations
    union all
    select
    'Total Pct' as commodity,
    sum(us_stock) / (select sum(amount) from amounts),
    sum(international_stock) / (select sum(amount) from amounts),
    sum(reit) / (select sum(amount) from amounts),
    sum(us_bond) / (select sum(amount) from amounts),
    sum(international_bond) / (select sum(amount) from amounts)
    from
    allocations
<% end %>

<section class="content-header">
    <select id="date-filter" name="timeframe" class="form-control pull-right" style="max-width: 300px;">
	<optgroup label="Months">
	    <% @months.each do |row| %>
		<option value="month,<%= row[0].value %>" <%= (@selected_date == row[0].value && @trunc_to == 'month') ? "selected" : "" %>><%= row[0].value %></option>
	    <% end %>
	</optgroup>
	<optgroup label="Years">
	    <% @years.each do |row| %>
		<option value="year,<%= row[0].value %>" <%= (@selected_date == row[0].value && @trunc_to == 'year') ? "selected" : "" %>><%= row[0].value %></option>
	    <% end %>
	</optgroup>
    </select>
    <h1>Dashboard for <%= @trunc_to %></h1>
</section>
<% @query = query do %>
    with
    days as (
    select x, date_trunc('day', xtn_date) as xtn_date, date_trunc('month', xtn_date) as xtn_month
    from (
    select x, (select min(xtn_month) from ledger) + (x || ' days')::interval as xtn_date
    from generate_series(0,2500) x
    ) x
    ),
    assets as (
    select
    xtn_date,
    xtn_month,
    xtn_year,
    amount
    from ledger
    where account ~ 'Assets:(Cash|Fidor|DKB|PayPal)'
    order by xtn_date, amount
    ),
    daily_cashflow as (
    select
    xtn_date::date,
    xtn_month::date,
    coalesce((select sum(case when amount > 0 then amount else 0 end) from assets where xtn_date = days.xtn_date), 0) as cash_in,
    coalesce((select sum(case when amount < 0 then amount else 0 end) from assets where xtn_date = days.xtn_date), 0) as cash_out,
    coalesce((select sum(amount) from assets where xtn_date = days.xtn_date), 0) as net
    from days
    )
    select
    xtn_date as "Date",
    cash_in as "Cash In",
    cash_out as "Cash Out",
    cash_in + cash_out as "Net",
    coalesce((select sum(case when net > 0 then net else 0 end) from daily_cashflow a where daily_cashflow.xtn_month <= xtn_date and xtn_date <= daily_cashflow.xtn_date), 0) as "Accumulated Cash In",
    coalesce((select sum(case when net < 0 then net else 0 end) from daily_cashflow a where daily_cashflow.xtn_month <= xtn_date and xtn_date <= daily_cashflow.xtn_date), 0) as "Accumulated Cash Out"
    from daily_cashflow
    where <%= @date_clause %>;
<% end %>

<%
chart_data = {
    labels: @query.rows.map{ |a| a[0].value },
    datasets: [
	{
	    type: 'line',
	    label: 'Accumulated Cash In',
	    backgroundColor: 'rgba(0,200,0,0.25)',
	    data: @query.rows.map{ |a| a[4].value.to_f },
	    borderColor: 'rgba(0,200,0,0.75)',
	    pointRadius: 1,
	    borderWidth: 2,
	    tension: 0,
	    steppedLine: false
	}, {
	    type: 'line',
	    label: 'Accumulated Cash Out',
	    backgroundColor: 'rgba(200,0,0,0.25)',
	    data: @query.rows.map{ |a| -1 * a[5].value.to_f },
	    borderColor: 'rgba(200,0,0,0.75)',
	    pointRadius: 1,
	    borderWidth: 2,
	    tension: 0,
	    steppedLine: false
	}
    ]
}
%>
<section class="content">
    <div class="row">
        <div class="col-md-12">
	    <div class="box">
		<div class="box-header with-border">
		    <h3 class="box-title">Cashflow Overview</h3>

		    <div class="box-tools pull-right">
			<button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
		    </div>
		</div>
		<div class="box-body">
		    <div class="row">
			<div class="col-md-12">
			    <div class="chart">
				<canvas id="myChart" width="400" height="100"></canvas>
			    </div>
			</div>
		    </div>
		</div>
		<div class="box-footer">
		    <div class="row">
			<%
			def kpi_class(kpis, col, invert: false)
                        previous = @kpis.rows[1][col].value
                        current = @kpis.rows[0][col].value
                        if previous > current && invert then 'text-green'
                        elsif previous < current && invert then 'text-red'
                        elsif previous > current then 'text-red'
                        elsif previous < current then 'text-green'
                        else 'text-yellow'
                        end
			end
			
			def kpi_icon(kpis, col, invert: false)
                        previous = @kpis.rows[1][col].value
                        current = @kpis.rows[0][col].value
                        if previous > current then 'fa-caret-down'
                        elsif previous < current then 'fa-caret-up'
                        else 'fa-caret-left'
                        end
			end
			
			def kpi_trend(kpis, col)
                        previous = @kpis.rows[1][col].value
                        current = @kpis.rows[0][col].value
                        if previous > current then sprintf('%0.2f', (previous - current).to_f / previous.to_f * -100.0)
                        elsif previous < current then sprintf('%0.2f', (current - previous).to_f / previous.to_f * 100.0)
                        else 0.0
                        end
			end
			
			def kpi_value(kpis, col)
		        sprintf('%0.2f', @kpis.rows[0][col].value)
			end
			%>
			
			<div class="col-sm-2 col-xs-6">
			    <div class="description-block border-right">
				<span class="description-percentage <%= kpi_class(@kpis, 1) %>"><i class="fa <%= kpi_icon(@kpis, 1) %>"></i> <%= kpi_trend(@kpis, 1) %>%</span>
				<h5 class="description-header"><%= kpi_value(@kpis, 1) %> €</h5>
				<span class="description-text">INCOME</span>
			    </div>
			</div>
			<div class="col-sm-2 col-xs-6">
			    <div class="description-block border-right">
				<span class="description-percentage <%= kpi_class(@kpis, 2, invert: true) %>"><i class="fa <%= kpi_icon(@kpis, 2) %>"></i> <%= kpi_trend(@kpis, 2) %>%</span>
				<h5 class="description-header"><%= kpi_value(@kpis, 2) %> €</h5>
				<span class="description-text">EXPENSES</span>
			    </div>
			</div>
			<div class="col-sm-2 col-xs-6">
			    <div class="description-block border-right">
				<span class="description-percentage <%= kpi_class(@kpis, 3) %>"><i class="fa <%= kpi_icon(@kpis, 3) %>"></i> <%= kpi_trend(@kpis, 3) %>%</span>
				<h5 class="description-header"><%= kpi_value(@kpis, 3) %> €</h5>
				<span class="description-text">NET</span>
			    </div>
			</div>
			<div class="col-sm-2 col-xs-6">
			    <div class="description-block border-right">
				<span class="description-percentage <%= kpi_class(@kpis, 4) %>"><i class="fa <%= kpi_icon(@kpis, 4) %>"></i> <%= kpi_trend(@kpis, 4) %>%</span>
				<h5 class="description-header"><%= kpi_value(@kpis, 4) %> €</h5>
				<span class="description-text">FUND BALANCE</span>
			    </div>
			</div>
			<div class="col-sm-2 col-xs-6">
			    <div class="description-block border-right">
				<span class="description-percentage <%= kpi_class(@kpis, 5) %>"><i class="fa <%= kpi_icon(@kpis, 5) %>"></i> <%= kpi_trend(@kpis, 5) %>%</span>
				<h5 class="description-header"><%= kpi_value(@kpis, 5) %> €</h5>
				<span class="description-text">ASSET BALANCE</span>
			    </div>
			</div>
		    </div>
		</div>
	    </div>
        </div>
    </div>
    <script>
     var ctx = document.getElementById("myChart").getContext('2d');
     var myChart = new Chart(ctx, {
	 type: 'bar',
	 data: <%= chart_data.to_json %>,
	 options: {
	     responsive: true,
	     maintainAspectRatio: false,
	     legend: {
		 display: false
	     },
	     scales: {
		 yAxes: [{
		     display: true,
		     ticks: {
			 beginAtZero:true
		     }
		 }], 
		 xAxes: [{
		     display: false
		 }]
	     },
	     tooltips: {
		 // Disable the on-canvas tooltip
		 enabled: false,
		 mode: 'x',
		 intersect: false,
		 pointHoverRadius: 20, 
		 custom: function(tooltipModel) {
		     // Tooltip Element
		     var tooltipEl = document.getElementById('chartjs-tooltip');

		     // Create element on first render
		     if (!tooltipEl) {
			 tooltipEl = document.createElement('div');
			 tooltipEl.id = 'chartjs-tooltip';
			 tooltipEl.innerHTML = "<table></table>";
			 document.body.appendChild(tooltipEl);
		     }

		     // Hide if no tooltip
		     if (tooltipModel.opacity === 0) {
			 tooltipEl.style.opacity = 0;
			 return;
		     }

		     // Set caret Position
		     tooltipEl.classList.remove('above', 'below', 'no-transform');
		     if (tooltipModel.yAlign) {
			 tooltipEl.classList.add(tooltipModel.yAlign);
		     } else {
			 tooltipEl.classList.add('no-transform');
		     }

		     function getBody(bodyItem) {
			 return bodyItem.lines;
		     }

		     // Set Text
		     if (tooltipModel.body) {
			 var titleLines = tooltipModel.title || [];
			 var bodyLines = tooltipModel.body.map(getBody);

			 var innerHtml = '<thead>';

			 titleLines.forEach(function(title) {
			     innerHtml += '<tr><th>' + title + '</th></tr>';
			 });
			 innerHtml += '</thead><tbody>';

			 bodyLines.forEach(function(body, i) {
			     var colors = tooltipModel.labelColors[i];
			     var style = 'background:' + colors.backgroundColor;
			     style += '; border-color:' + colors.borderColor;
			     style += '; border-width: 2px';
			     var span = '<span style="' + style + '"></span>';
			     innerHtml += '<tr><td>' + span + body + '</td></tr>';
			 });
			 innerHtml += '</tbody>';

			 var tableRoot = tooltipEl.querySelector('table');
			 tableRoot.innerHTML = innerHtml;
		     }

		     // `this` will be the overall tooltip
		     var position = this._chart.canvas.getBoundingClientRect();

		     // Display, position, and set styles for font
		     tooltipEl.style.opacity = 1;
		     tooltipEl.style.position = 'absolute';
		     tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
		     tooltipEl.style.top = position.top + tooltipModel.caretY + 'px';
		     tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
		     tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
		     tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
		     tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';
		 }
	     }
	 }
     });
    </script>

    <div class="row">
	<div class="col-md-6">
	    <div class="box">
		<div class="box-header with-border">
		    <h3 class="box-title">Summary</h3>
		</div>
		<div class="box-body">
		    <div class="table-responsive">
			<table class="table table-striped table-hover table-condensed">
			    <thead>
				<tr>
				    <th>Category</th>
				    <th><span class="pull-right">Amount</span></th>
				</tr>
			    </thead>
			    <%
			    @income_value = (@income.rows[-1][1].value rescue 0) || 0
			    @budgeted_value = (@budgeted_expenses.rows[-1][2].value rescue 0) || 0
			    @budgeted_diff = (@budgted_expenses.rows[-1][3].value rescue 0) || 0
			    @unbudgeted_value = (@unbudgeted_expenses.rows[-1][1].value rescue 0) || 0
			    @funds_in_value = ((@funds.rows[-1][2].value rescue 0) || 0) + ((@long_term_funds.rows[-1][2].value rescue 0) || 0)
			    @funds_out_value = ((@funds.rows[-1][3].value rescue 0) || 0) + ((@long_term_funds.rows[-1][3].value rescue 0) || 0)
			    %>
			    <tbody>
				<tr>
				    <td>Income</td>
				    <td><span class="pull-right"><%= sprintf("%0.2f", @income_value) %></span></td>
				</tr>
				<tr>
				    <td>Budgeted Expenses</td>
				    <td><span class="pull-right"><span style="<%= @budgeted_diff > 0 ? 'color: red' : ''%>"><%= sprintf("%0.2f", @budgeted_value) %></span></span></td>
				</tr>
				<tr>
				    <td>Unbudgeted Expenses</td>
				    <td><span class="pull-right"><span style="<%= @unbudgeted_value > 500 ? 'color: red' : '' %>"><%= sprintf("%0.2f", @unbudgeted_value) %></span></span></td>
				</tr>
				<tr>
				    <td>Funds In</td>
				    <td><span class="pull-right"><%= sprintf("%0.2f", @funds_in_value) %></span></td>
				</tr>
				<tr>
				    <td>Funds Out</td>
				    <td><span class="pull-right"><%= sprintf("%0.2f", @funds_out_value) %></span></td>
				</tr>
			    </tbody>
			</table>
		    </div>
		</div>
	    </div>
	</div>
	<div class="col-md-6">
	    <div class="box">
		<div class="box-header with-border">
		    <div class="box-title">Cash</div>
		</div>
		<div class="box-body">
		    <div class="table-responsive">
			<table class="table table-striped table-hover table-condensed">
			    <thead>
				<tr>
				    <th>Category</th>
				    <th><span class="pull-right">Amount</span></th>
				</tr>
			    </thead>
			    <tbody>
				<tr>
				    <td>Bank Balance</td>
				    <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][0].value) %></span></td>
				</tr>
				<tr>
				    <td>Liquid Investments</td>
				    <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][1].value) %></span></td>
				</tr>
				<tr>
				    <td>Fund Balance</td>
				    <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][2].value) %></span></td>
				</tr>
				<tr>
				    <td>Liabilities Balance</td>
				    <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][3].value) %></span></td>
				</tr>
				<tr>
				    <td>Cash Balance</td>
				    <td><span class="pull-right"><%= sprintf("%0.2f", @cash.rows[0][4].value) %></span></td>
				</tr>
			    </tbody>
			</table>
		    </div>
		</div>
	    </div>
	</div>
    </div>
    <div class="row">
	<div class="col-md-6">
	    <div class="box">
		<div class="box-header with-border">
		    <div class="box-title">Income</div>
		</div>
		<div class="box-body">
		    <%= @income.error %>
		    <div class="table-responsive">
			<%= table @income do |t|
			t.link /Account/ => "/reports/_register?account=:0&#{@register_param}=#{@selected_date}", :if => ->(c,r){!(c.text =~ /(Salary|Total)/)}
			t.link /Account/ => "/reports/_register?account=Income:Salary&#{@register_param}=#{@selected_date}", :if => ->(c,r){c.text =~ /Salary/}
			t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
			end
			%>
		    </div>
		</div>
	    </div>
	</div>
	<div class="col-md-6">
	    <div class="box">
		<div class="box-header with-border">
		    <div class="box-title">Unbudgeted Expenses</div>
		</div>
		<div class="box-body">
		    <%= @unbudgeted_expenses.error %>
		    <div class="table-responsive">
			<%= table @unbudgeted_expenses do |t|
			t.decorate /Account/ => ExpensesDecorator.new(@register_param => @selected_date, cleared: '')
			t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
			t.decorate /Amount/ => StyleDecorator.new('color' => 'red'), :if => ->(c,r){c.value && c.value >= 500 && r[0].text == 'Total'}
			t.decorate /Amount/ => StyleDecorator.new('color' => 'red'), :if => ->(c,r){c.value && c.value >= 100 && r[0].text != 'Total'}
			end
			%>
		    </div>
		</div>
	    </div>
	</div>
    </div>

    <div class="row">
	<div class="col-md-12">
	    <div class="box">
		<div class="box-header with-border">
		    <div class="box-title">Budgeted Expenses</div>
		</div>
		<div class="box-body">
		    <%= @budgeted_expenses.error %>
		    <div class="table-responsive">
			<%= table @budgeted_expenses do |t|
			t.decorate /Account/ => ExpensesDecorator.new(@register_param => @selected_date, cleared: '')
			t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
			end
			%>
		    </div>
		</div>
	    </div>
	</div>
	<div class="col-md-12">
	    <div class="box">
		<div class="box-header with-border">
		    <div class="box-title">Short-Term Funds</div>
		</div>
		<div class="box-body">
		    <%= @funds.error %>
		    <div class="table-responsive">
			<%= table @funds do |t|
			t.link /Fund/ => "/reports/_register?account=Assets:Funds::0&#{@register_param}=#{@selected_date}&cleared=", :if => ->(c,r){c.text != "Total"}
			t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
			t.decorate /Net/ => StyleDecorator.new('color' => 'red'), :if => ->(c,r){ (r[4].value || 0) < 0 }
			t.decorate /Net/ => StyleDecorator.new('color' => 'green'), :if => ->(c,r){ (r[4].value || 0) > 0 }
			end
			%>
		    </div>
		</div>
	    </div>
	</div>
	<div class="col-md-12">
	    <div class="box">
		<div class="box-header with-border">
		    <div class="box-title">Long-Term Funds</div>
		</div>
		<div class="box-body">
		    <%= @long_term_funds.error %>
		    <div class="table-responsive">
			<%= table @long_term_funds do |t|
			t.link /Fund/ => "/reports/_register?account=Assets:Funds::0&#{@register_param}=#{@selected_date}&cleared=", :if => ->(c,r){c.text != "Total"}
			t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
			t.decorate /Net/ => StyleDecorator.new('color' => 'red'), :if => ->(c,r){ (r[4].value || 0) < 0 }
			t.decorate /Net/ => StyleDecorator.new('color' => 'green'), :if => ->(c,r){ (r[4].value || 0) > 0 }
			end
			%>
		    </div>
		</div>
	    </div>
	</div>
	<div class="col-md-12">

	    <div class="box">
		<div class="box-header with-border">
		    <div class="box-title">Current Accounts</div>
		</div>
		<div class="box-body">
		    <%= @current_accounts.error %>
		    <div class="table-responsive">
			<%= table @current_accounts do |t|
			t.link /Account/ => "/reports/_register?account=:0&#{@register_param}=#{@selected_date}&cleared=", :if => ->(c,r){c.text != "Total"}
			t.decorate /.*/ => StyleDecorator.new('font-weight' => 'bold'), :if => ->(c,r){r[0].text == 'Total'}
			t.decorate /Net/ => StyleDecorator.new('color' => 'red'), :if => ->(c,r){ (r[4].value || 0) < 0 }
			t.decorate /Net/ => StyleDecorator.new('color' => 'green'), :if => ->(c,r){ (r[4].value || 0) > 0 }
			end
			%>
		    </div>
		</div>
	    </div>
	</div>
</section>
    </div>
